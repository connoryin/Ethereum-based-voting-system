// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package poll

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PollCandidate is an auto generated low-level Go binding around an user-defined struct.
type PollCandidate struct {
	Id         *big.Int
	Name       [32]byte
	VoteNumGet *big.Int
	IsWinner   bool
	Exists     bool
}

// PollVoter is an auto generated low-level Go binding around an user-defined struct.
type PollVoter struct {
	Id       [32]byte
	Voted    bool
	VotedFor []*big.Int
	Exists   bool
}

// PollMetaData contains all meta data concerning the Poll contract.
var PollMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalNumVoter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numBallotPerVoter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"votedFor\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structPoll.Voter[]\",\"name\":\"_voters\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteNumGet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structPoll.Candidate[]\",\"name\":\"_candidates\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_isAnonymous\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"endVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVoterDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"votedFor\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structPoll.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"candidateNames\",\"type\":\"bytes32[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"getCandidateInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteNumGet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structPoll.Candidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"voterId\",\"type\":\"bytes32\"}],\"name\":\"getVoterInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"votedFor\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structPoll.Voter\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteNumGet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structPoll.Candidate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteNumGet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"structPoll.Candidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"candidatesID\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"voterID\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// PollABI is the input ABI used to generate the binding from.
// Deprecated: Use PollMetaData.ABI instead.
var PollABI = PollMetaData.ABI

// PollBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PollMetaData.Bin instead.
var PollBin = PollMetaData.Bin

// DeployPoll deploys a new Ethereum contract, binding an instance of Poll to it.
func DeployPoll(auth *bind.TransactOpts, backend bind.ContractBackend, _eventId *big.Int, _totalNumVoter *big.Int, _numBallotPerVoter *big.Int, _voters []PollVoter, _candidates []PollCandidate, _isAnonymous bool) (common.Address, *types.Transaction, *Poll, error) {
	parsed, err := PollMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PollBin), backend, _eventId, _totalNumVoter, _numBallotPerVoter, _voters, _candidates, _isAnonymous)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Poll{PollCaller: PollCaller{contract: contract}, PollTransactor: PollTransactor{contract: contract}, PollFilterer: PollFilterer{contract: contract}}, nil
}

// Poll is an auto generated Go binding around an Ethereum contract.
type Poll struct {
	PollCaller     // Read-only binding to the contract
	PollTransactor // Write-only binding to the contract
	PollFilterer   // Log filterer for contract events
}

// PollCaller is an auto generated read-only Go binding around an Ethereum contract.
type PollCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PollTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PollTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PollFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PollFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PollSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PollSession struct {
	Contract     *Poll             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PollCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PollCallerSession struct {
	Contract *PollCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PollTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PollTransactorSession struct {
	Contract     *PollTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PollRaw is an auto generated low-level Go binding around an Ethereum contract.
type PollRaw struct {
	Contract *Poll // Generic contract binding to access the raw methods on
}

// PollCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PollCallerRaw struct {
	Contract *PollCaller // Generic read-only contract binding to access the raw methods on
}

// PollTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PollTransactorRaw struct {
	Contract *PollTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPoll creates a new instance of Poll, bound to a specific deployed contract.
func NewPoll(address common.Address, backend bind.ContractBackend) (*Poll, error) {
	contract, err := bindPoll(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Poll{PollCaller: PollCaller{contract: contract}, PollTransactor: PollTransactor{contract: contract}, PollFilterer: PollFilterer{contract: contract}}, nil
}

// NewPollCaller creates a new read-only instance of Poll, bound to a specific deployed contract.
func NewPollCaller(address common.Address, caller bind.ContractCaller) (*PollCaller, error) {
	contract, err := bindPoll(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PollCaller{contract: contract}, nil
}

// NewPollTransactor creates a new write-only instance of Poll, bound to a specific deployed contract.
func NewPollTransactor(address common.Address, transactor bind.ContractTransactor) (*PollTransactor, error) {
	contract, err := bindPoll(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PollTransactor{contract: contract}, nil
}

// NewPollFilterer creates a new log filterer instance of Poll, bound to a specific deployed contract.
func NewPollFilterer(address common.Address, filterer bind.ContractFilterer) (*PollFilterer, error) {
	contract, err := bindPoll(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PollFilterer{contract: contract}, nil
}

// bindPoll binds a generic wrapper to an already deployed contract.
func bindPoll(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PollABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Poll *PollRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Poll.Contract.PollCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Poll *PollRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Poll.Contract.PollTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Poll *PollRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Poll.Contract.PollTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Poll *PollCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Poll.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Poll *PollTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Poll.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Poll *PollTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Poll.Contract.contract.Transact(opts, method, params...)
}

// GetAllVoterDetails is a free data retrieval call binding the contract method 0x92bcab34.
//
// Solidity: function getAllVoterDetails() view returns((bytes32,bool,uint256[],bool)[], bytes32[][] candidateNames)
func (_Poll *PollCaller) GetAllVoterDetails(opts *bind.CallOpts) ([]PollVoter, [][][32]byte, error) {
	var out []interface{}
	err := _Poll.contract.Call(opts, &out, "getAllVoterDetails")

	if err != nil {
		return *new([]PollVoter), *new([][][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]PollVoter)).(*[]PollVoter)
	out1 := *abi.ConvertType(out[1], new([][][32]byte)).(*[][][32]byte)

	return out0, out1, err

}

// GetAllVoterDetails is a free data retrieval call binding the contract method 0x92bcab34.
//
// Solidity: function getAllVoterDetails() view returns((bytes32,bool,uint256[],bool)[], bytes32[][] candidateNames)
func (_Poll *PollSession) GetAllVoterDetails() ([]PollVoter, [][][32]byte, error) {
	return _Poll.Contract.GetAllVoterDetails(&_Poll.CallOpts)
}

// GetAllVoterDetails is a free data retrieval call binding the contract method 0x92bcab34.
//
// Solidity: function getAllVoterDetails() view returns((bytes32,bool,uint256[],bool)[], bytes32[][] candidateNames)
func (_Poll *PollCallerSession) GetAllVoterDetails() ([]PollVoter, [][][32]byte, error) {
	return _Poll.Contract.GetAllVoterDetails(&_Poll.CallOpts)
}

// GetCandidateInfo is a free data retrieval call binding the contract method 0x70f67cfe.
//
// Solidity: function getCandidateInfo(uint256 candidateId) view returns((uint256,bytes32,uint256,bool,bool))
func (_Poll *PollCaller) GetCandidateInfo(opts *bind.CallOpts, candidateId *big.Int) (PollCandidate, error) {
	var out []interface{}
	err := _Poll.contract.Call(opts, &out, "getCandidateInfo", candidateId)

	if err != nil {
		return *new(PollCandidate), err
	}

	out0 := *abi.ConvertType(out[0], new(PollCandidate)).(*PollCandidate)

	return out0, err

}

// GetCandidateInfo is a free data retrieval call binding the contract method 0x70f67cfe.
//
// Solidity: function getCandidateInfo(uint256 candidateId) view returns((uint256,bytes32,uint256,bool,bool))
func (_Poll *PollSession) GetCandidateInfo(candidateId *big.Int) (PollCandidate, error) {
	return _Poll.Contract.GetCandidateInfo(&_Poll.CallOpts, candidateId)
}

// GetCandidateInfo is a free data retrieval call binding the contract method 0x70f67cfe.
//
// Solidity: function getCandidateInfo(uint256 candidateId) view returns((uint256,bytes32,uint256,bool,bool))
func (_Poll *PollCallerSession) GetCandidateInfo(candidateId *big.Int) (PollCandidate, error) {
	return _Poll.Contract.GetCandidateInfo(&_Poll.CallOpts, candidateId)
}

// GetInfo is a free data retrieval call binding the contract method 0x5a9b0b89.
//
// Solidity: function getInfo() view returns(bool, uint256, uint256, uint256, bool)
func (_Poll *PollCaller) GetInfo(opts *bind.CallOpts) (bool, *big.Int, *big.Int, *big.Int, bool, error) {
	var out []interface{}
	err := _Poll.contract.Call(opts, &out, "getInfo")

	if err != nil {
		return *new(bool), *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(bool)).(*bool)

	return out0, out1, out2, out3, out4, err

}

// GetInfo is a free data retrieval call binding the contract method 0x5a9b0b89.
//
// Solidity: function getInfo() view returns(bool, uint256, uint256, uint256, bool)
func (_Poll *PollSession) GetInfo() (bool, *big.Int, *big.Int, *big.Int, bool, error) {
	return _Poll.Contract.GetInfo(&_Poll.CallOpts)
}

// GetInfo is a free data retrieval call binding the contract method 0x5a9b0b89.
//
// Solidity: function getInfo() view returns(bool, uint256, uint256, uint256, bool)
func (_Poll *PollCallerSession) GetInfo() (bool, *big.Int, *big.Int, *big.Int, bool, error) {
	return _Poll.Contract.GetInfo(&_Poll.CallOpts)
}

// GetVoterInfo is a free data retrieval call binding the contract method 0x6b959c81.
//
// Solidity: function getVoterInfo(bytes32 voterId) view returns((bytes32,bool,uint256[],bool), (uint256,bytes32,uint256,bool,bool)[])
func (_Poll *PollCaller) GetVoterInfo(opts *bind.CallOpts, voterId [32]byte) (PollVoter, []PollCandidate, error) {
	var out []interface{}
	err := _Poll.contract.Call(opts, &out, "getVoterInfo", voterId)

	if err != nil {
		return *new(PollVoter), *new([]PollCandidate), err
	}

	out0 := *abi.ConvertType(out[0], new(PollVoter)).(*PollVoter)
	out1 := *abi.ConvertType(out[1], new([]PollCandidate)).(*[]PollCandidate)

	return out0, out1, err

}

// GetVoterInfo is a free data retrieval call binding the contract method 0x6b959c81.
//
// Solidity: function getVoterInfo(bytes32 voterId) view returns((bytes32,bool,uint256[],bool), (uint256,bytes32,uint256,bool,bool)[])
func (_Poll *PollSession) GetVoterInfo(voterId [32]byte) (PollVoter, []PollCandidate, error) {
	return _Poll.Contract.GetVoterInfo(&_Poll.CallOpts, voterId)
}

// GetVoterInfo is a free data retrieval call binding the contract method 0x6b959c81.
//
// Solidity: function getVoterInfo(bytes32 voterId) view returns((bytes32,bool,uint256[],bool), (uint256,bytes32,uint256,bool,bool)[])
func (_Poll *PollCallerSession) GetVoterInfo(voterId [32]byte) (PollVoter, []PollCandidate, error) {
	return _Poll.Contract.GetVoterInfo(&_Poll.CallOpts, voterId)
}

// GetWinner is a free data retrieval call binding the contract method 0x8e7ea5b2.
//
// Solidity: function getWinner() view returns(uint256, (uint256,bytes32,uint256,bool,bool))
func (_Poll *PollCaller) GetWinner(opts *bind.CallOpts) (*big.Int, PollCandidate, error) {
	var out []interface{}
	err := _Poll.contract.Call(opts, &out, "getWinner")

	if err != nil {
		return *new(*big.Int), *new(PollCandidate), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(PollCandidate)).(*PollCandidate)

	return out0, out1, err

}

// GetWinner is a free data retrieval call binding the contract method 0x8e7ea5b2.
//
// Solidity: function getWinner() view returns(uint256, (uint256,bytes32,uint256,bool,bool))
func (_Poll *PollSession) GetWinner() (*big.Int, PollCandidate, error) {
	return _Poll.Contract.GetWinner(&_Poll.CallOpts)
}

// GetWinner is a free data retrieval call binding the contract method 0x8e7ea5b2.
//
// Solidity: function getWinner() view returns(uint256, (uint256,bytes32,uint256,bool,bool))
func (_Poll *PollCallerSession) GetWinner() (*big.Int, PollCandidate, error) {
	return _Poll.Contract.GetWinner(&_Poll.CallOpts)
}

// EndVote is a paid mutator transaction binding the contract method 0xb9223946.
//
// Solidity: function endVote() returns()
func (_Poll *PollTransactor) EndVote(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Poll.contract.Transact(opts, "endVote")
}

// EndVote is a paid mutator transaction binding the contract method 0xb9223946.
//
// Solidity: function endVote() returns()
func (_Poll *PollSession) EndVote() (*types.Transaction, error) {
	return _Poll.Contract.EndVote(&_Poll.TransactOpts)
}

// EndVote is a paid mutator transaction binding the contract method 0xb9223946.
//
// Solidity: function endVote() returns()
func (_Poll *PollTransactorSession) EndVote() (*types.Transaction, error) {
	return _Poll.Contract.EndVote(&_Poll.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0xddbf695a.
//
// Solidity: function vote(uint256[] candidatesID, bytes32 voterID) returns()
func (_Poll *PollTransactor) Vote(opts *bind.TransactOpts, candidatesID []*big.Int, voterID [32]byte) (*types.Transaction, error) {
	return _Poll.contract.Transact(opts, "vote", candidatesID, voterID)
}

// Vote is a paid mutator transaction binding the contract method 0xddbf695a.
//
// Solidity: function vote(uint256[] candidatesID, bytes32 voterID) returns()
func (_Poll *PollSession) Vote(candidatesID []*big.Int, voterID [32]byte) (*types.Transaction, error) {
	return _Poll.Contract.Vote(&_Poll.TransactOpts, candidatesID, voterID)
}

// Vote is a paid mutator transaction binding the contract method 0xddbf695a.
//
// Solidity: function vote(uint256[] candidatesID, bytes32 voterID) returns()
func (_Poll *PollTransactorSession) Vote(candidatesID []*big.Int, voterID [32]byte) (*types.Transaction, error) {
	return _Poll.Contract.Vote(&_Poll.TransactOpts, candidatesID, voterID)
}
